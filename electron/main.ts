import { app, BrowserWindow, ipcMain, shell } from 'electron';

import { setupUpdates } from './update';

// import url from 'url'
// import path from 'path';

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const SPLASH_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

let mainWindow: BrowserWindow | null;
let splashScreen: BrowserWindow | null;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const createSplashScreen = (): void => {
  splashScreen = new BrowserWindow({
    width: 256,
    height: 256,
    frame: false,
    resizable: false,
    center: true,
    transparent: false,
    alwaysOnTop: true,
  });

  splashScreen.loadURL(SPLASH_WEBPACK_ENTRY);

  splashScreen.on('closed', () => {
    splashScreen = null;
  });
};

const createWindow = (): void => {
  createSplashScreen();
  // Create the browser window.
  mainWindow = new BrowserWindow({
    height: 1024,
    width: 1024,
    show: false,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Wait for the content to be fully loaded
  mainWindow.webContents.once('did-finish-load', () => {
    if (splashScreen) {
      splashScreen.close();
    }
    mainWindow?.show();
  });

  // Open the DevTools.
  mainWindow.webContents.openDevTools();

  // Open external URLs in the default browser
  mainWindow.webContents.setWindowOpenHandler(({ url }) => {
    if (url.startsWith('http:') || url.startsWith('https:')) {
      shell.openExternal(url);
    }
    return { action: 'deny' };
  });

  // Disable navigation from main page
  mainWindow.webContents.on('will-navigate', ({ url }) => {
    return { action: 'deny' };
  });

  // Disable navigation from main page
  mainWindow.webContents.on('did-start-navigation', ({ url }) => {
    return { action: 'deny' };
  });

  // Disable Reload (Ctrl+R) and Force Reload (Ctrl+Shift+R)
  mainWindow.webContents.on('before-input-event', (event, input) => {
    if (input.type === 'keyDown' && (input.key === 'r' || input.key === 'R') && (input.control || input.meta)) {
      event.preventDefault();
    }
  });
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', () => {
  setupUpdates();
  createWindow();
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

ipcMain.on('get-preload-path', (e) => {
  e.returnValue = MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY;
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
